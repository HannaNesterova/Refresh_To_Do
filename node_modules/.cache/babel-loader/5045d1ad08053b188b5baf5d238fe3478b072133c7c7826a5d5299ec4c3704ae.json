{"ast":null,"code":"var _jsxFileName = \"/Users/qw/Desktop/APP/src/components/Column/Column.js\",\n  _s = $RefreshSig$();\nimport styles from './Column.module.scss';\nimport Card from '../Card/Card';\nimport CardForm from '../CardForm/CardForm';\nimport { useSelector } from 'react-redux';\n\n/*const Column = (props) => {\n  //const [searchString, setSearchString] = useState('');\n\n  const searchString = useSelector ((state) => state.searchString);\n  const allCards = useSelector((state) => state.cards);\n  const cards = useSelector((state) => state.cards).filter(\n    (card) => card.columnId === props.id && card.title.includes(searchString)\n  );\n\n\n\n  return (\n    <article className={styles.column}>\n      <h2 className={styles.title}>\n        <span className={styles.icon + ' fa fa-' + props.icon}></span>\n        {props.title}\n      </h2>\n      <ul className={styles.cards}>\n        {cards.map((card) => (\n          <Card key={card.id} title={card.title} />\n        ))}\n      </ul>\n      <CardForm columnId={props.id} />\n    </article>\n  );\n};\n*/\n/*const Column = (props) => {\n  const searchString = useSelector((state) => state.searchString);\n  const allCards = useSelector((state) => state.cards);\n\n  const cards = allCards.filter(\n    (card) => \n    card.columnId === props.id && card.title.includes(searchString)\n  );\n\n  return (\n    <article className={styles.column}>\n      <h2 className={styles.title}>\n        <span className={styles.icon + ' fa fa-' + props.icon}></span>\n        {props.title}\n      </h2>\n      <ul className={styles.cards}>\n        {allCards\n          .filter((card) => card.columnId === props.id)\n          .map((card) => (\n            <Card key={card.id} title={card.title} />\n          ))}\n        {cards.map((card) => (\n          <Card key={card.id} title={card.title} />\n        ))}\n      </ul>\n      <CardForm columnId={props.id} />\n    </article>\n  );\n};*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Column = props => {\n  _s();\n  const searchString = useSelector(state => state.searchString);\n  let allCards = useSelector(state => state.cards);\n\n  // Filter cards to show only those that include the letter 'a'\n  let cards = allCards.filter(card => card.title.includes('a'));\n\n  // If searchString is not empty, filter cards to show only those that include the searchString\n  if (searchString !== '') {\n    cards = allCards.filter(card => card.title.includes(searchString));\n    // Filter allCards to remove cards that don't include the searchString\n    allCards = allCards.filter(card => card.title.includes(searchString));\n  }\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    className: styles.column,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: styles.title,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: styles.icon + ' fa fa-' + props.icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), props.title]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: styles.cards,\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(Card, {\n        title: card.title\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardForm, {\n      columnId: props.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(Column, \"2aPap7wrKWydX/iAibT9th58eZs=\", false, function () {\n  return [useSelector, useSelector];\n});\n_c = Column;\nexport default Column;\nvar _c;\n$RefreshReg$(_c, \"Column\");","map":{"version":3,"names":["styles","Card","CardForm","useSelector","jsxDEV","_jsxDEV","Column","props","_s","searchString","state","allCards","cards","filter","card","title","includes","className","column","children","icon","fileName","_jsxFileName","lineNumber","columnNumber","map","id","columnId","_c","$RefreshReg$"],"sources":["/Users/qw/Desktop/APP/src/components/Column/Column.js"],"sourcesContent":["import styles from './Column.module.scss';\nimport Card from '../Card/Card';\nimport CardForm from '../CardForm/CardForm';\nimport { useSelector } from 'react-redux';\n\n\n\n\n/*const Column = (props) => {\n  //const [searchString, setSearchString] = useState('');\n\n  const searchString = useSelector ((state) => state.searchString);\n  const allCards = useSelector((state) => state.cards);\n  const cards = useSelector((state) => state.cards).filter(\n    (card) => card.columnId === props.id && card.title.includes(searchString)\n  );\n\n\n\n  return (\n    <article className={styles.column}>\n      <h2 className={styles.title}>\n        <span className={styles.icon + ' fa fa-' + props.icon}></span>\n        {props.title}\n      </h2>\n      <ul className={styles.cards}>\n        {cards.map((card) => (\n          <Card key={card.id} title={card.title} />\n        ))}\n      </ul>\n      <CardForm columnId={props.id} />\n    </article>\n  );\n};\n*/\n/*const Column = (props) => {\n  const searchString = useSelector((state) => state.searchString);\n  const allCards = useSelector((state) => state.cards);\n\n  const cards = allCards.filter(\n    (card) => \n    card.columnId === props.id && card.title.includes(searchString)\n  );\n\n  return (\n    <article className={styles.column}>\n      <h2 className={styles.title}>\n        <span className={styles.icon + ' fa fa-' + props.icon}></span>\n        {props.title}\n      </h2>\n      <ul className={styles.cards}>\n        {allCards\n          .filter((card) => card.columnId === props.id)\n          .map((card) => (\n            <Card key={card.id} title={card.title} />\n          ))}\n        {cards.map((card) => (\n          <Card key={card.id} title={card.title} />\n        ))}\n      </ul>\n      <CardForm columnId={props.id} />\n    </article>\n  );\n};*/\nconst Column = (props) => {\n  const searchString = useSelector((state) => state.searchString);\n  let allCards = useSelector((state) => state.cards);\n\n  // Filter cards to show only those that include the letter 'a'\n  let cards = allCards.filter((card) => card.title.includes('a'));\n\n  // If searchString is not empty, filter cards to show only those that include the searchString\n  if (searchString !== '') {\n    cards = allCards.filter((card) => card.title.includes(searchString));\n    // Filter allCards to remove cards that don't include the searchString\n    allCards = allCards.filter((card) => card.title.includes(searchString));\n  }\n\n  return (\n    <article className={styles.column}>\n      <h2 className={styles.title}>\n        <span className={styles.icon + ' fa fa-' + props.icon}></span>\n        {props.title}\n      </h2>\n      <ul className={styles.cards}>\n        {cards.map((card) => (\n          <Card key={card.id} title={card.title} />\n        ))}\n      </ul>\n      <CardForm columnId={props.id} />\n    </article>\n  );\n};\n\n\nexport default Column;"],"mappings":";;AAAA,OAAOA,MAAM,MAAM,sBAAsB;AACzC,OAAOC,IAAI,MAAM,cAAc;AAC/B,OAAOC,QAAQ,MAAM,sBAAsB;AAC3C,SAASC,WAAW,QAAQ,aAAa;;AAKzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5BA,SAAAC,MAAA,IAAAC,OAAA;AA6BA,MAAMC,MAAM,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACxB,MAAMC,YAAY,GAAGN,WAAW,CAAEO,KAAK,IAAKA,KAAK,CAACD,YAAY,CAAC;EAC/D,IAAIE,QAAQ,GAAGR,WAAW,CAAEO,KAAK,IAAKA,KAAK,CAACE,KAAK,CAAC;;EAElD;EACA,IAAIA,KAAK,GAAGD,QAAQ,CAACE,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,KAAK,CAACC,QAAQ,CAAC,GAAG,CAAC,CAAC;;EAE/D;EACA,IAAIP,YAAY,KAAK,EAAE,EAAE;IACvBG,KAAK,GAAGD,QAAQ,CAACE,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,KAAK,CAACC,QAAQ,CAACP,YAAY,CAAC,CAAC;IACpE;IACAE,QAAQ,GAAGA,QAAQ,CAACE,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,KAAK,CAACC,QAAQ,CAACP,YAAY,CAAC,CAAC;EACzE;EAEA,oBACEJ,OAAA;IAASY,SAAS,EAAEjB,MAAM,CAACkB,MAAO;IAAAC,QAAA,gBAChCd,OAAA;MAAIY,SAAS,EAAEjB,MAAM,CAACe,KAAM;MAAAI,QAAA,gBAC1Bd,OAAA;QAAMY,SAAS,EAAEjB,MAAM,CAACoB,IAAI,GAAG,SAAS,GAAGb,KAAK,CAACa;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAQ,EAC7DjB,KAAK,CAACQ,KAAK;IAAA;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACT,eACLnB,OAAA;MAAIY,SAAS,EAAEjB,MAAM,CAACY,KAAM;MAAAO,QAAA,EACzBP,KAAK,CAACa,GAAG,CAAEX,IAAI,iBACdT,OAAA,CAACJ,IAAI;QAAec,KAAK,EAAED,IAAI,CAACC;MAAM,GAA3BD,IAAI,CAACY,EAAE;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACnB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACC,eACLnB,OAAA,CAACH,QAAQ;MAACyB,QAAQ,EAAEpB,KAAK,CAACmB;IAAG;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACxB;AAEd,CAAC;AAAChB,EAAA,CA5BIF,MAAM;EAAA,QACWH,WAAW,EACjBA,WAAW;AAAA;AAAAyB,EAAA,GAFtBtB,MAAM;AA+BZ,eAAeA,MAAM;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}